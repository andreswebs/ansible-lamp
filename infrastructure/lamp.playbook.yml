#!/usr/bin/env ansible-playbook
---
- name: Configure LAMP stack
  hosts: web_servers
  become: yes
  become_user: root
  vars_files:
    - vars/app_config.yml
    - vars/mysql_config.yml
    # - vars/aws_codedeploy_keys.yml

  tasks:

    # Configure repositories

    # https://launchpad.net/~ondrej/+archive/ubuntu/php
    - name: Add php ppa
      apt_repository: 
        repo: ppa:ondrej/php
      tags:
        - ppa
    # https://launchpad.net/~ondrej/+archive/ubuntu/apache2
    - name: Add apache2 ppa
      apt_repository:
        repo: ppa:ondrej/apache2 
      tags:
        - ppa

    # https://launchpad.net/~certbot/+archive/ubuntu/certbot
    - name: Add certbot ppa
      apt_repository:
        repo: ppa:certbot/certbot
      tags:
        - ppa

    # System update
    - name: Upgrade system
      apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes
        autoclean: yes
      tags:
        - system

    # Set up Apache
    - name: Install Apache
      apt:
        state: present
        install_recommends: yes    
        name:
          - apache2
          - apache2-dev
      tags:
        - apache

    - name: Enable Apache module rewrite
      apache2_module:
        name: rewrite
        state: present
      notify: Restart Apache
      tags:
        - apache

    - name: Start the Apache service
      service: 
        name: apache2 
        state: started
        enabled: true
      tags:
        - apache

    # Set up MySQL
    # See: 
    # https://stackoverflow.com/questions/26597926/install-mysql-with-ansible-on-ubuntu
    # https://serverfault.com/questions/891373/unable-to-create-mysql-database-through-ansible
    - name: Copy MySQL root credentials as .my.cnf file
      template: 
        src: root_mysql_my.cnf.j2 
        dest: /root/.my.cnf 
        owner: root
        mode: '0600'
      tags:
        - mysql

    - name: Install MySQL
      apt:
        state: present
        install_recommends: yes
        name:
          - mysql-client
          - mysql-server
          - python-pymysql
          - libmysqlclient-dev
      tags:
        - mysql

    - name: Start the MySQL service
      service: 
        name: mysql 
        state: started
        enabled: true
      tags:
        - mysql

    - name: Update MySQL root password for all root accounts
      mysql_user: 
        name: root 
        host: "{{ item }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        password: "{{ mysql.root_password }}"
        check_implicit_admin: yes
        priv: "*.*:ALL,GRANT"
      with_items:
        - "{{ ansible_hostname }}"
        - 127.0.0.1
        - ::1
        - localhost
      notify:
        - Restart MySQL        
      tags:
        - mysql

    - name: Ensure anonymous user(s) are not in the database
      mysql_user: 
        name: '' 
        host: "{{ item }}" 
        state: absent
      with_items:
        - localhost
        - "{{ ansible_hostname }}"
      notify:
        - Restart MySQL        
      tags:
        - mysql

    - name: Remove the test database
      mysql_db: 
        name: test 
        state: absent
      notify:
        - Restart MySQL
      tags:
        - mysql

    - name: Create app database
      mysql_db:
        name: "{{ mysql.database_name }}"
        state: present
        collation: utf8_general_ci
        encoding: utf8
      notify:
        - Restart MySQL
      tags:
        - mysql

    - name: Create app database user
      mysql_user: 
        name: "{{ mysql.database_user }}" 
        password: "{{ mysql.user_password }}" 
        priv: "*.*:ALL" 
        host: localhost
      notify:
        - Restart MySQL        
      tags:
        - mysql

    # TODO: conditionally
    # do only if there's a new dump in bucket
    - name: Copy database dump files
      copy:
        src: "files/mysql/{{ mysql.database_dump }}"
        dest: "/tmp/{{ mysql.database_dump }}"
        owner: root
        group: root
        mode: '0644' 
      tags:
        - mysql

    - name: Import database dump
      mysql_db:
        name: "{{ mysql.database_name }}"
        state: import
        target: "/tmp/{{ mysql.database_dump }}"
        login_host: localhost
        login_user: root
        login_password: "{{ mysql.root_password }}"
      notify:
        - Restart MySQL        
      tags:
        - mysql

    # Set up PHP
    - name: Install PHP
      apt: 
        state: present
        install_recommends: yes
        name:
          - php
          - php-mysql
          - php-curl  
          - php-soap
          - php-xml
          - php-xmlrpc
          - php-zip
          - php-mbstring
          - php-gettext    
          - php-cli
          - libapache2-mod-php
          - php-bcmath 
          - php-bz2 
          - php-intl 
          - php-gd 
      notify: Restart Apache
      tags:
        - php

    # Deploy app
    - name: Ensure app directory
      file:
        path: "{{ app_dir }}"
        state: directory
      tags:
        - app

    - name: Deploy app files
      synchronize:
        src: files/app/
        dest: "{{ app_dir }}"
        delete: yes
      tags:
        - app

    # TODO: generate certificates and configure
    - name: Install Certbot
      apt:
        state: present
        install_recommends: yes
        name:
          - certbot
          - python-certbot-apache
      tags:
        - letsencrypt

    # Note: this would be needed if using CodeDeploy

    # # Install and configure AWS CodeDeploy agent
    # - name: Get AWS CodeDeploy agent
    #   get_url:
    #     url: "https://aws-codedeploy-{{ aws_codedeploy.region }}.s3.amazonaws.com/latest/{{ aws_codedeploy.agent_file }}"
    #     dest: /home/ubuntu
    #     mode: '0666'
    #   tags:
    #     - codedeploy

    # - name: Install AWS CodeDeploy agent
    #   apt:
    #     state: present
    #     install_recommends: yes
    #     deb: "/home/ubuntu/{{ aws_codedeploy.agent_file }}"
    #   tags:
    #     - codedeploy

    # - name: Start and enable AWS CodeDeploy agent
    #   service:
    #     name: codedeploy-agent
    #     state: started
    #     enabled: yes
    #   tags:
    #     - codedeploy

    # - name: Set up AWS CodeDeploy codedeploy.onpremises.yml
    #   template:
    #     src: codedeploy.onpremises.yml.j2
    #     dest: /etc/codedeploy-agent/conf/codedeploy.onpremises.yml
    #   notify: 
    #     - Restart CodeDeploy Agent
    #   tags:
    #     - codedeploy

    # System check
    - name: Check if a reboot is required
      shell: "[ -f /var/run/reboot-required ]"
      failed_when: false
      register: reboot_required
      changed_when: reboot_required.rc == 0
      notify: Reboot instance
      tags:
        - system

  handlers:

    - name: Restart Apache
      service: 
        name: apache2 
        state: restarted

    - name: Restart MySQL
      service: 
        name: mysql 
        state: restarted

    - name: Restart CodeDeploy Agent
      service:
        name: codedeploy-agent
        state: restarted

    - name: Reboot instance
      reboot:
        msg: Maintenance reboot initiated